"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import mysql, postgresql
${imports if imports else ""}

# Identificadores de revisión usados por Alembic
revision: str = ${repr(up_revision)}
down_revision: Union[str, None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    """Upgrade schema."""
    ${upgrades if upgrades else "### commands auto generated by Alembic - please adjust! ###"}
    ${upgrades if upgrades else "pass"}
    ${upgrades if upgrades else "### end Alembic commands ###"}


def downgrade() -> None:
    """Downgrade schema."""
    ${downgrades if downgrades else "### commands auto generated by Alembic - please adjust! ###"}
    ${downgrades if downgrades else "pass"}
    ${downgrades if downgrades else "### end Alembic commands ###"}


# Templates para operaciones comunes
def create_enum(enum_name, enum_values):
    """Crea un tipo enum."""
    enum_type = sa.Enum(*enum_values, name=enum_name)
    enum_type.create(op.get_bind(), checkfirst=True)
    return enum_type

def drop_enum(enum_name):
    """Elimina un tipo enum."""
    enum_type = sa.Enum(name=enum_name)
    enum_type.drop(op.get_bind(), checkfirst=True)

def add_column_if_not_exists(table_name, column_name, column_type, **kwargs):
    """Añade una columna si no existe."""
    if not column_exists(table_name, column_name):
        op.add_column(table_name, sa.Column(column_name, column_type, **kwargs))

def column_exists(table_name, column_name):
    """Verifica si una columna existe."""
    connection = op.get_bind()
    if connection.engine.name == 'postgresql':
        query = """
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = '%s' AND column_name = '%s'
            )
        """ % (table_name, column_name)
    else:
        query = """
            SELECT 1 FROM pragma_table_info('%s') 
            WHERE name = '%s'
        """ % (table_name, column_name)
    return connection.scalar(query)

def table_exists(table_name):
    """Verifica si una tabla existe."""
    connection = op.get_bind()
    if connection.engine.name == 'postgresql':
        query = """
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_name = '%s'
            )
        """ % table_name
    else:
        query = """
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='%s'
        """ % table_name
    return connection.scalar(query)